{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Processing R Provider Processing provider for R scripts plugin for QGIS . The plugin allows execution of R scripts directly from QGIS on data loaded in QGIS. Instalation The plugin is available QGIS Python Plugins Repository here . It can also be installed directly from QGIS via the Plugins tool. Building from source for offline install can be done by downloading the source code and running command: make zip in the main directory. The produced zip file can then be installed in QGIS from Plugins tool in the Install from zip window. R R is a free and open-source software environment for statistical computing and graphics. It has to be installed separately ( Download and Install R ), together with a few necessary libraries. The beauty of Processing implementation is that you can add your scripts, simple or complex ones, and they may then be used as any other module, piped into more complex workflows, etc. Test some of the preinstalled examples, if you have R already installed (remember to activate R modules from the General configuration of Processing - QGIS -> Settings -> Processing -> Providers -> R). Settings for the plugin Linux On Linux, the toolbox should find system installation of R on its own. Windows If R is installed in the expected path (e.g. \"C:\\PROGRAM FILES\\R\\\"), the plugin tries to detect the R installation automatically. Otherwise, it is necessary to set the setting \"R folder\" to the correct folder, as seen on the image. The correct folder is the one under which folders \"bin\", \"doc\", \"etc\" and others exist. Generally, it is a folder that has R's version in its name.","title":"Home"},{"location":"#processing-r-provider","text":"Processing provider for R scripts plugin for QGIS . The plugin allows execution of R scripts directly from QGIS on data loaded in QGIS.","title":"Processing R Provider"},{"location":"#instalation","text":"The plugin is available QGIS Python Plugins Repository here . It can also be installed directly from QGIS via the Plugins tool. Building from source for offline install can be done by downloading the source code and running command: make zip in the main directory. The produced zip file can then be installed in QGIS from Plugins tool in the Install from zip window.","title":"Instalation"},{"location":"#r","text":"R is a free and open-source software environment for statistical computing and graphics. It has to be installed separately ( Download and Install R ), together with a few necessary libraries. The beauty of Processing implementation is that you can add your scripts, simple or complex ones, and they may then be used as any other module, piped into more complex workflows, etc. Test some of the preinstalled examples, if you have R already installed (remember to activate R modules from the General configuration of Processing - QGIS -> Settings -> Processing -> Providers -> R).","title":"R"},{"location":"#settings-for-the-plugin","text":"","title":"Settings for the plugin"},{"location":"#linux","text":"On Linux, the toolbox should find system installation of R on its own.","title":"Linux"},{"location":"#windows","text":"If R is installed in the expected path (e.g. \"C:\\PROGRAM FILES\\R\\\"), the plugin tries to detect the R installation automatically. Otherwise, it is necessary to set the setting \"R folder\" to the correct folder, as seen on the image. The correct folder is the one under which folders \"bin\", \"doc\", \"etc\" and others exist. Generally, it is a folder that has R's version in its name.","title":"Windows"},{"location":"ex_console_output/","text":"Example with tool console log This script takes input vector data and one of its fields. The result is a tool console log with summary statistics for a given field of the layer. Script ##Basic statistics=group ##Statistic summary console=name ##Layer=vector ##Field=Field Layer Summary_statistics <- data.frame(rbind( sum(Layer[[Field]]), length(Layer[[Field]]), length(unique(Layer[[Field]])), min(Layer[[Field]]), max(Layer[[Field]]), max(Layer[[Field]])-min(Layer[[Field]]), mean(Layer[[Field]]), median(Layer[[Field]]), sd(Layer[[Field]])), row.names=c(\"Sum:\",\"Count:\",\"Unique values:\",\"Minimum value:\",\"Maximum value:\",\"Range:\",\"Mean value:\",\"Median value:\",\"Standard deviation:\")) colnames(Summary_statistics) <- c(Field) >Summary_statistics Script lines description Basic statistics is the group of the algorithm. Statistic summary console is the name of the algorithm. Layer is the input vector layer. Field is the name of a field from Layer . Create data.frame with calculated statistics and assign correct row names. Give the data.frame correct colname, the name of the field. Print the created data.frame to the tool console log. The output will be shown in the tool console log.","title":"Example with tool console log"},{"location":"ex_console_output/#example-with-tool-console-log","text":"This script takes input vector data and one of its fields. The result is a tool console log with summary statistics for a given field of the layer.","title":"Example with tool console log"},{"location":"ex_console_output/#script","text":"##Basic statistics=group ##Statistic summary console=name ##Layer=vector ##Field=Field Layer Summary_statistics <- data.frame(rbind( sum(Layer[[Field]]), length(Layer[[Field]]), length(unique(Layer[[Field]])), min(Layer[[Field]]), max(Layer[[Field]]), max(Layer[[Field]])-min(Layer[[Field]]), mean(Layer[[Field]]), median(Layer[[Field]]), sd(Layer[[Field]])), row.names=c(\"Sum:\",\"Count:\",\"Unique values:\",\"Minimum value:\",\"Maximum value:\",\"Range:\",\"Mean value:\",\"Median value:\",\"Standard deviation:\")) colnames(Summary_statistics) <- c(Field) >Summary_statistics","title":"Script"},{"location":"ex_console_output/#script-lines-description","text":"Basic statistics is the group of the algorithm. Statistic summary console is the name of the algorithm. Layer is the input vector layer. Field is the name of a field from Layer . Create data.frame with calculated statistics and assign correct row names. Give the data.frame correct colname, the name of the field. Print the created data.frame to the tool console log. The output will be shown in the tool console log.","title":"Script lines description"},{"location":"ex_plot/","text":"Example of graphs output This scripts takes input vector data and randomly samples Size points over it. The result is returned as a vector layer. s Script ##Basic statistics=group ##Graphs=name ##output_plots_to_html ##Layer=vector ##Field=Field Layer qqnorm(Layer[[Field]]) qqline(Layer[[Field]]) Script lines description Basic statistics is the group of the algorithm. Graphs is the name of the algorithm. The script output plot or plots. Layer is the input vector layer. Field is the name of the field from Layer whose values will be plotted. Produce a standard QQ plot of the values from Field of Layer . Add a line to a \u201ctheoretical\u201d, by default normal, quantile-quantile plot which passes through the probs quantiles, by default the first and third quartiles. The plot is automatically added to the Result Viewer of Processing, and it can be open the location shown in the image.","title":"Example of graphs output"},{"location":"ex_plot/#example-of-graphs-output","text":"This scripts takes input vector data and randomly samples Size points over it. The result is returned as a vector layer. s","title":"Example of graphs output"},{"location":"ex_plot/#script","text":"##Basic statistics=group ##Graphs=name ##output_plots_to_html ##Layer=vector ##Field=Field Layer qqnorm(Layer[[Field]]) qqline(Layer[[Field]])","title":"Script"},{"location":"ex_plot/#script-lines-description","text":"Basic statistics is the group of the algorithm. Graphs is the name of the algorithm. The script output plot or plots. Layer is the input vector layer. Field is the name of the field from Layer whose values will be plotted. Produce a standard QQ plot of the values from Field of Layer . Add a line to a \u201ctheoretical\u201d, by default normal, quantile-quantile plot which passes through the probs quantiles, by default the first and third quartiles. The plot is automatically added to the Result Viewer of Processing, and it can be open the location shown in the image.","title":"Script lines description"},{"location":"ex_raster_output/","text":"Example with raster output This scripts takes point layer and a field name as an input and performs automatic kriging. The returned value is a raster layer of interpolated values. Script ##Basic statistics=group ##Krige value=name ##load_vector_using_rgdal ##Layer=vector ##Field=Field Layer ##Output=output raster library(\"automap\") table = as.data.frame(Layer) coordinates(table)= ~coords.x1+coords.x2 c = Layer[[Field]] kriging_result = autoKrige(c~1, table) prediction = raster(kriging_result$krige_output) Output = prediction","title":"Example with raster output"},{"location":"ex_raster_output/#example-with-raster-output","text":"This scripts takes point layer and a field name as an input and performs automatic kriging. The returned value is a raster layer of interpolated values.","title":"Example with raster output"},{"location":"ex_raster_output/#script","text":"##Basic statistics=group ##Krige value=name ##load_vector_using_rgdal ##Layer=vector ##Field=Field Layer ##Output=output raster library(\"automap\") table = as.data.frame(Layer) coordinates(table)= ~coords.x1+coords.x2 c = Layer[[Field]] kriging_result = autoKrige(c~1, table) prediction = raster(kriging_result$krige_output) Output = prediction","title":"Script"},{"location":"ex_table_output/","text":"Example with table output This script takes input vector data and one of its fields. The result is a table with summary statistics for a given field of the layer. Script ##Basic statistics=group ##Statistic table=name ##Layer=vector ##Field=Field Layer ##Stat=Output table Summary_statistics <- data.frame(rbind( sum(Layer[[Field]]), length(Layer[[Field]]), length(unique(Layer[[Field]])), min(Layer[[Field]]), max(Layer[[Field]]), max(Layer[[Field]])-min(Layer[[Field]]), mean(Layer[[Field]]), median(Layer[[Field]]), sd(Layer[[Field]])), row.names=c(\"Sum:\",\"Count:\",\"Unique values:\",\"Minimum value:\",\"Maximum value:\",\"Range:\",\"Mean value:\",\"Median value:\",\"Standard deviation:\")) colnames(Summary_statistics) <- c(Field) Stat <- Summary_statistics Script lines description Basic statistics is the group of the algorithm. Statistic table is the name of the algorithm. Layer is the input vector layer. Field is the name of a field from Layer . Stat is the name of output that will be created and returned to QGIS. Create data.frame with calculated statistics and assign correct row names. Give the data.frame correct colname, the name of the field. Assign the created data.frame to output variable ( Stat ). The output will be presented in QGIS as a table.","title":"Example with table output"},{"location":"ex_table_output/#example-with-table-output","text":"This script takes input vector data and one of its fields. The result is a table with summary statistics for a given field of the layer.","title":"Example with table output"},{"location":"ex_table_output/#script","text":"##Basic statistics=group ##Statistic table=name ##Layer=vector ##Field=Field Layer ##Stat=Output table Summary_statistics <- data.frame(rbind( sum(Layer[[Field]]), length(Layer[[Field]]), length(unique(Layer[[Field]])), min(Layer[[Field]]), max(Layer[[Field]]), max(Layer[[Field]])-min(Layer[[Field]]), mean(Layer[[Field]]), median(Layer[[Field]]), sd(Layer[[Field]])), row.names=c(\"Sum:\",\"Count:\",\"Unique values:\",\"Minimum value:\",\"Maximum value:\",\"Range:\",\"Mean value:\",\"Median value:\",\"Standard deviation:\")) colnames(Summary_statistics) <- c(Field) Stat <- Summary_statistics","title":"Script"},{"location":"ex_table_output/#script-lines-description","text":"Basic statistics is the group of the algorithm. Statistic table is the name of the algorithm. Layer is the input vector layer. Field is the name of a field from Layer . Stat is the name of output that will be created and returned to QGIS. Create data.frame with calculated statistics and assign correct row names. Give the data.frame correct colname, the name of the field. Assign the created data.frame to output variable ( Stat ). The output will be presented in QGIS as a table.","title":"Script lines description"},{"location":"ex_vector_output/","text":"Example with vector output This scripts takes input vector data and randomly samples Size points over it. The result is returned as a vector layer. Script ##Point pattern analysis=group ##Sample random points=name ##load_vector_using_rgdal ##Layer=vector ##Size=number 10 ##Output= output vector pts = spsample(Layer,Size,type=\"random\") Output = SpatialPointsDataFrame(pts, as.data.frame(pts)) Script lines description Point pattern analysis is the group of the algorithm. Sample random points is the name of the algorithm. The script does not use sf package; it instead uses packages sp and rgdal . Layer is the input vector layer. Size is the numerical parameter with a default value of 10. Output is the vector layer that will be created by the algorithm. Call the spsample function of the sp library and pass it to all the input defined above. Create the output vector with the SpatialPointsDataFrame function. That\u2019s it! Just run the algorithm with a vector layer you have in the QGIS Legend, choose a number of the random point, and you will get them in the QGIS Map Canvas.","title":"Example with vector output"},{"location":"ex_vector_output/#example-with-vector-output","text":"This scripts takes input vector data and randomly samples Size points over it. The result is returned as a vector layer.","title":"Example with vector output"},{"location":"ex_vector_output/#script","text":"##Point pattern analysis=group ##Sample random points=name ##load_vector_using_rgdal ##Layer=vector ##Size=number 10 ##Output= output vector pts = spsample(Layer,Size,type=\"random\") Output = SpatialPointsDataFrame(pts, as.data.frame(pts))","title":"Script"},{"location":"ex_vector_output/#script-lines-description","text":"Point pattern analysis is the group of the algorithm. Sample random points is the name of the algorithm. The script does not use sf package; it instead uses packages sp and rgdal . Layer is the input vector layer. Size is the numerical parameter with a default value of 10. Output is the vector layer that will be created by the algorithm. Call the spsample function of the sp library and pass it to all the input defined above. Create the output vector with the SpatialPointsDataFrame function. That\u2019s it! Just run the algorithm with a vector layer you have in the QGIS Legend, choose a number of the random point, and you will get them in the QGIS Map Canvas.","title":"Script lines description"},{"location":"script-syntax/","text":"Script syntax The R scripts for the plugin use extension .rsx . It is classic R script with several metadata lines (starting with ## ) that define the interaction between QGIS and R. Metadata amongst other things specify how UI of the tool will look like. The script loads necessary packages by itself. Combination of sp and rgdal or sf for vector data and sp and rgdal or raster for raster data. Any other packages need to be directly loaded using library() command in the script body. Metadata ##script_name=name script_name is the name of the script; under this name, it will be listed in processing toolbox. ##group_name=group group_name is the name of the group of the script, which allows sorting of scripts into groups in processing toolbox. Script behaviour Several metadata lines define the general behaviour of the script. ##output_plots_to_html (older version of this metadata keyword is ##showplots ) defines that there will be graphical output from the script that will be presented as an HTML page with images. ##load_raster_using_rgdal (legacy alias ##dontuserasterpackage ) specifies that raster data should not be pased to R using raster package as RasterLayer or RasterBrick object. Raster data are instead read using rgdal into object SpatialGridDataFrame from sp . ##load_vector_using_rgdal specifies that vector data should not be pased to R using sf package as sf data.frame . Instead data are passed as Spatial?DataFrame (where ? is the type of vector object) from sp package. ##pass_filenames (legacy alias ##passfilenames ) specifies that data are not passed directly. Instead only their file names are passed. Inputs The inputs to R script are specified as: variable_name=variable_type [default_value/from_variable] . This metadata line also specifies how tool UI will look in QGIS, as inputs are one section of the tool UI. In this specification variable_name is the name of the variable used in R script, variable_type is a type of input variable from possible input types (vector, raster, table, number, string, boolean, Field). The default_value is applicable to number, string and boolean inputs. The from variable_ applies to Field and must point to variable_name of vector input. So the inputs can look like this: ##Layer=vector specifies that there will be variable Layer that will be a vector. ##Size=number 10 specifies that there will be variable Size that will be numeric, and a default value for Size will be 10 . ##X=Field Layer specifies that variable X will be field name taken from Layer . Outputs The outputs of R script are specified as ##variable_name=output output_type . This line also specifies how tool UI will look in QGIS, as outputs are one section of the tool UI. In this specification variable_name specifies variable from the script that will be exported back to QGIS, output_type is one of the allowed types that can be returned from R script (layer, raster, folder, HTML, number, string, table). So the inputs can look like this: ##New_layer=output vector specifies that the variable New_layer will be imported to QGIS as a vector layer. ##New_raster=output raster specifies that variable New_raster will be imported to QGIS as a raster layer. Printing from R to tool log If any output of any line in R script should be outputted to tool log, it needs to be preceded by > . So, for example, the following code will print the number of rows in Layer . >nrow(Layer)","title":"Script syntax"},{"location":"script-syntax/#script-syntax","text":"The R scripts for the plugin use extension .rsx . It is classic R script with several metadata lines (starting with ## ) that define the interaction between QGIS and R. Metadata amongst other things specify how UI of the tool will look like. The script loads necessary packages by itself. Combination of sp and rgdal or sf for vector data and sp and rgdal or raster for raster data. Any other packages need to be directly loaded using library() command in the script body.","title":"Script syntax"},{"location":"script-syntax/#metadata","text":"##script_name=name script_name is the name of the script; under this name, it will be listed in processing toolbox. ##group_name=group group_name is the name of the group of the script, which allows sorting of scripts into groups in processing toolbox.","title":"Metadata"},{"location":"script-syntax/#script-behaviour","text":"Several metadata lines define the general behaviour of the script. ##output_plots_to_html (older version of this metadata keyword is ##showplots ) defines that there will be graphical output from the script that will be presented as an HTML page with images. ##load_raster_using_rgdal (legacy alias ##dontuserasterpackage ) specifies that raster data should not be pased to R using raster package as RasterLayer or RasterBrick object. Raster data are instead read using rgdal into object SpatialGridDataFrame from sp . ##load_vector_using_rgdal specifies that vector data should not be pased to R using sf package as sf data.frame . Instead data are passed as Spatial?DataFrame (where ? is the type of vector object) from sp package. ##pass_filenames (legacy alias ##passfilenames ) specifies that data are not passed directly. Instead only their file names are passed.","title":"Script behaviour"},{"location":"script-syntax/#inputs","text":"The inputs to R script are specified as: variable_name=variable_type [default_value/from_variable] . This metadata line also specifies how tool UI will look in QGIS, as inputs are one section of the tool UI. In this specification variable_name is the name of the variable used in R script, variable_type is a type of input variable from possible input types (vector, raster, table, number, string, boolean, Field). The default_value is applicable to number, string and boolean inputs. The from variable_ applies to Field and must point to variable_name of vector input. So the inputs can look like this: ##Layer=vector specifies that there will be variable Layer that will be a vector. ##Size=number 10 specifies that there will be variable Size that will be numeric, and a default value for Size will be 10 . ##X=Field Layer specifies that variable X will be field name taken from Layer .","title":"Inputs"},{"location":"script-syntax/#outputs","text":"The outputs of R script are specified as ##variable_name=output output_type . This line also specifies how tool UI will look in QGIS, as outputs are one section of the tool UI. In this specification variable_name specifies variable from the script that will be exported back to QGIS, output_type is one of the allowed types that can be returned from R script (layer, raster, folder, HTML, number, string, table). So the inputs can look like this: ##New_layer=output vector specifies that the variable New_layer will be imported to QGIS as a vector layer. ##New_raster=output raster specifies that variable New_raster will be imported to QGIS as a raster layer.","title":"Outputs"},{"location":"script-syntax/#printing-from-r-to-tool-log","text":"If any output of any line in R script should be outputted to tool log, it needs to be preceded by > . So, for example, the following code will print the number of rows in Layer . >nrow(Layer)","title":"Printing from R to tool log"}]}